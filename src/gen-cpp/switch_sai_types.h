/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef switch_sai_TYPES_H
#define switch_sai_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace switch_sai {

typedef int64_t sai_thrift_object_id_t;

typedef int64_t sai_thrift_uint64_t;

typedef int16_t sai_thrift_vlan_id_t;

typedef std::string sai_thrift_mac_t;

typedef int8_t sai_thrift_vlan_tagging_mode_t;

typedef int32_t sai_thrift_status_t;

typedef std::string sai_thrift_ip4_t;

typedef std::string sai_thrift_ip6_t;

typedef int8_t sai_thrift_ip_addr_family_t;

typedef int8_t sai_thrift_port_stp_port_state_t;

typedef int32_t sai_thrift_hostif_trap_id_t;

typedef int32_t sai_thrift_next_hop_type_t;

typedef int32_t sai_thrift_vlan_stat_counter_t;

typedef int32_t sai_thrift_policer_stat_counter_t;

typedef int32_t sai_thrift_port_stat_counter_t;

typedef int32_t sai_thrift_queue_stat_counter_t;

typedef int32_t sai_thrift_pg_stat_counter_t;

typedef int32_t sai_thrift_buffer_pool_stat_counter_t;

typedef int32_t sai_thrift_policer_stat_t;

typedef int32_t sai_thrift_stat_id_t;

class sai_thrift_fdb_entry_t;

class sai_thrift_vlan_port_t;

class sai_thrift_ip_t;

class sai_thrift_ip_address_t;

class sai_thrift_ip_prefix_t;

class sai_thrift_object_list_t;

class sai_thrift_vlan_list_t;

class sai_thrift_s32_list_t;

class sai_thrift_acl_mask_t;

class sai_thrift_acl_data_t;

class sai_thrift_acl_field_data_t;

class sai_thrift_acl_parameter_t;

class sai_thrift_acl_action_data_t;

class sai_thrift_u32_list_t;

class sai_thrift_qos_map_params_t;

class sai_thrift_qos_map_t;

class sai_thrift_qos_map_list_t;

class sai_thrift_fdb_values_t;

class sai_thrift_attribute_value_t;

class sai_thrift_attribute_t;

class sai_thrift_route_entry_t;

class sai_thrift_neighbor_entry_t;

class sai_thrift_attribute_list_t;

class sai_thrift_result_data_t;

class sai_thrift_result_t;

typedef struct _sai_thrift_fdb_entry_t__isset {
  _sai_thrift_fdb_entry_t__isset() : mac_address(false), bv_id(false) {}
  bool mac_address :1;
  bool bv_id :1;
} _sai_thrift_fdb_entry_t__isset;

class sai_thrift_fdb_entry_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_fdb_entry_t(const sai_thrift_fdb_entry_t&);
  sai_thrift_fdb_entry_t& operator=(const sai_thrift_fdb_entry_t&);
  sai_thrift_fdb_entry_t() noexcept
                         : mac_address(),
                           bv_id(0) {
  }

  virtual ~sai_thrift_fdb_entry_t() noexcept;
  sai_thrift_mac_t mac_address;
  sai_thrift_object_id_t bv_id;

  _sai_thrift_fdb_entry_t__isset __isset;

  void __set_mac_address(const sai_thrift_mac_t& val);

  void __set_bv_id(const sai_thrift_object_id_t val);

  bool operator == (const sai_thrift_fdb_entry_t & rhs) const
  {
    if (!(mac_address == rhs.mac_address))
      return false;
    if (!(bv_id == rhs.bv_id))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_fdb_entry_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_fdb_entry_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_fdb_entry_t &a, sai_thrift_fdb_entry_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_fdb_entry_t& obj);

typedef struct _sai_thrift_vlan_port_t__isset {
  _sai_thrift_vlan_port_t__isset() : port_id(false), tagging_mode(false) {}
  bool port_id :1;
  bool tagging_mode :1;
} _sai_thrift_vlan_port_t__isset;

class sai_thrift_vlan_port_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_vlan_port_t(const sai_thrift_vlan_port_t&) noexcept;
  sai_thrift_vlan_port_t& operator=(const sai_thrift_vlan_port_t&) noexcept;
  sai_thrift_vlan_port_t() noexcept
                         : port_id(0),
                           tagging_mode(0) {
  }

  virtual ~sai_thrift_vlan_port_t() noexcept;
  sai_thrift_object_id_t port_id;
  sai_thrift_vlan_tagging_mode_t tagging_mode;

  _sai_thrift_vlan_port_t__isset __isset;

  void __set_port_id(const sai_thrift_object_id_t val);

  void __set_tagging_mode(const sai_thrift_vlan_tagging_mode_t val);

  bool operator == (const sai_thrift_vlan_port_t & rhs) const
  {
    if (!(port_id == rhs.port_id))
      return false;
    if (!(tagging_mode == rhs.tagging_mode))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_vlan_port_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_vlan_port_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_vlan_port_t &a, sai_thrift_vlan_port_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_vlan_port_t& obj);

typedef struct _sai_thrift_ip_t__isset {
  _sai_thrift_ip_t__isset() : ip4(false), ip6(false) {}
  bool ip4 :1;
  bool ip6 :1;
} _sai_thrift_ip_t__isset;

class sai_thrift_ip_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_ip_t(const sai_thrift_ip_t&);
  sai_thrift_ip_t& operator=(const sai_thrift_ip_t&);
  sai_thrift_ip_t() noexcept
                  : ip4(),
                    ip6() {
  }

  virtual ~sai_thrift_ip_t() noexcept;
  sai_thrift_ip4_t ip4;
  sai_thrift_ip6_t ip6;

  _sai_thrift_ip_t__isset __isset;

  void __set_ip4(const sai_thrift_ip4_t& val);

  void __set_ip6(const sai_thrift_ip6_t& val);

  bool operator == (const sai_thrift_ip_t & rhs) const
  {
    if (!(ip4 == rhs.ip4))
      return false;
    if (!(ip6 == rhs.ip6))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_ip_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_ip_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_ip_t &a, sai_thrift_ip_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_ip_t& obj);

typedef struct _sai_thrift_ip_address_t__isset {
  _sai_thrift_ip_address_t__isset() : addr_family(false), addr(false) {}
  bool addr_family :1;
  bool addr :1;
} _sai_thrift_ip_address_t__isset;

class sai_thrift_ip_address_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_ip_address_t(const sai_thrift_ip_address_t&);
  sai_thrift_ip_address_t& operator=(const sai_thrift_ip_address_t&);
  sai_thrift_ip_address_t() noexcept
                          : addr_family(0) {
  }

  virtual ~sai_thrift_ip_address_t() noexcept;
  sai_thrift_ip_addr_family_t addr_family;
  sai_thrift_ip_t addr;

  _sai_thrift_ip_address_t__isset __isset;

  void __set_addr_family(const sai_thrift_ip_addr_family_t val);

  void __set_addr(const sai_thrift_ip_t& val);

  bool operator == (const sai_thrift_ip_address_t & rhs) const
  {
    if (!(addr_family == rhs.addr_family))
      return false;
    if (!(addr == rhs.addr))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_ip_address_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_ip_address_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_ip_address_t &a, sai_thrift_ip_address_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_ip_address_t& obj);

typedef struct _sai_thrift_ip_prefix_t__isset {
  _sai_thrift_ip_prefix_t__isset() : addr_family(false), addr(false), mask(false) {}
  bool addr_family :1;
  bool addr :1;
  bool mask :1;
} _sai_thrift_ip_prefix_t__isset;

class sai_thrift_ip_prefix_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_ip_prefix_t(const sai_thrift_ip_prefix_t&);
  sai_thrift_ip_prefix_t& operator=(const sai_thrift_ip_prefix_t&);
  sai_thrift_ip_prefix_t() noexcept
                         : addr_family(0) {
  }

  virtual ~sai_thrift_ip_prefix_t() noexcept;
  sai_thrift_ip_addr_family_t addr_family;
  sai_thrift_ip_t addr;
  sai_thrift_ip_t mask;

  _sai_thrift_ip_prefix_t__isset __isset;

  void __set_addr_family(const sai_thrift_ip_addr_family_t val);

  void __set_addr(const sai_thrift_ip_t& val);

  void __set_mask(const sai_thrift_ip_t& val);

  bool operator == (const sai_thrift_ip_prefix_t & rhs) const
  {
    if (!(addr_family == rhs.addr_family))
      return false;
    if (!(addr == rhs.addr))
      return false;
    if (!(mask == rhs.mask))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_ip_prefix_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_ip_prefix_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_ip_prefix_t &a, sai_thrift_ip_prefix_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_ip_prefix_t& obj);

typedef struct _sai_thrift_object_list_t__isset {
  _sai_thrift_object_list_t__isset() : count(false), object_id_list(false) {}
  bool count :1;
  bool object_id_list :1;
} _sai_thrift_object_list_t__isset;

class sai_thrift_object_list_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_object_list_t(const sai_thrift_object_list_t&);
  sai_thrift_object_list_t& operator=(const sai_thrift_object_list_t&);
  sai_thrift_object_list_t() noexcept
                           : count(0) {
  }

  virtual ~sai_thrift_object_list_t() noexcept;
  int32_t count;
  std::vector<sai_thrift_object_id_t>  object_id_list;

  _sai_thrift_object_list_t__isset __isset;

  void __set_count(const int32_t val);

  void __set_object_id_list(const std::vector<sai_thrift_object_id_t> & val);

  bool operator == (const sai_thrift_object_list_t & rhs) const
  {
    if (!(count == rhs.count))
      return false;
    if (!(object_id_list == rhs.object_id_list))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_object_list_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_object_list_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_object_list_t &a, sai_thrift_object_list_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_object_list_t& obj);

typedef struct _sai_thrift_vlan_list_t__isset {
  _sai_thrift_vlan_list_t__isset() : vlan_count(false), vlan_list(false) {}
  bool vlan_count :1;
  bool vlan_list :1;
} _sai_thrift_vlan_list_t__isset;

class sai_thrift_vlan_list_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_vlan_list_t(const sai_thrift_vlan_list_t&);
  sai_thrift_vlan_list_t& operator=(const sai_thrift_vlan_list_t&);
  sai_thrift_vlan_list_t() noexcept
                         : vlan_count(0) {
  }

  virtual ~sai_thrift_vlan_list_t() noexcept;
  int32_t vlan_count;
  std::vector<sai_thrift_vlan_id_t>  vlan_list;

  _sai_thrift_vlan_list_t__isset __isset;

  void __set_vlan_count(const int32_t val);

  void __set_vlan_list(const std::vector<sai_thrift_vlan_id_t> & val);

  bool operator == (const sai_thrift_vlan_list_t & rhs) const
  {
    if (!(vlan_count == rhs.vlan_count))
      return false;
    if (!(vlan_list == rhs.vlan_list))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_vlan_list_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_vlan_list_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_vlan_list_t &a, sai_thrift_vlan_list_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_vlan_list_t& obj);

typedef struct _sai_thrift_s32_list_t__isset {
  _sai_thrift_s32_list_t__isset() : count(false), s32list(false) {}
  bool count :1;
  bool s32list :1;
} _sai_thrift_s32_list_t__isset;

class sai_thrift_s32_list_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_s32_list_t(const sai_thrift_s32_list_t&);
  sai_thrift_s32_list_t& operator=(const sai_thrift_s32_list_t&);
  sai_thrift_s32_list_t() noexcept
                        : count(0) {
  }

  virtual ~sai_thrift_s32_list_t() noexcept;
  int32_t count;
  std::vector<int32_t>  s32list;

  _sai_thrift_s32_list_t__isset __isset;

  void __set_count(const int32_t val);

  void __set_s32list(const std::vector<int32_t> & val);

  bool operator == (const sai_thrift_s32_list_t & rhs) const
  {
    if (!(count == rhs.count))
      return false;
    if (!(s32list == rhs.s32list))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_s32_list_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_s32_list_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_s32_list_t &a, sai_thrift_s32_list_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_s32_list_t& obj);

typedef struct _sai_thrift_acl_mask_t__isset {
  _sai_thrift_acl_mask_t__isset() : u8(false), s8(false), u16(false), s16(false), u32(false), s32(false), mac(false), ip4(false), ip6(false) {}
  bool u8 :1;
  bool s8 :1;
  bool u16 :1;
  bool s16 :1;
  bool u32 :1;
  bool s32 :1;
  bool mac :1;
  bool ip4 :1;
  bool ip6 :1;
} _sai_thrift_acl_mask_t__isset;

class sai_thrift_acl_mask_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_acl_mask_t(const sai_thrift_acl_mask_t&);
  sai_thrift_acl_mask_t& operator=(const sai_thrift_acl_mask_t&);
  sai_thrift_acl_mask_t() noexcept
                        : u8(0),
                          s8(0),
                          u16(0),
                          s16(0),
                          u32(0),
                          s32(0),
                          mac(),
                          ip4(),
                          ip6() {
  }

  virtual ~sai_thrift_acl_mask_t() noexcept;
  int8_t u8;
  int8_t s8;
  int16_t u16;
  int16_t s16;
  int32_t u32;
  int32_t s32;
  sai_thrift_mac_t mac;
  sai_thrift_ip4_t ip4;
  sai_thrift_ip6_t ip6;

  _sai_thrift_acl_mask_t__isset __isset;

  void __set_u8(const int8_t val);

  void __set_s8(const int8_t val);

  void __set_u16(const int16_t val);

  void __set_s16(const int16_t val);

  void __set_u32(const int32_t val);

  void __set_s32(const int32_t val);

  void __set_mac(const sai_thrift_mac_t& val);

  void __set_ip4(const sai_thrift_ip4_t& val);

  void __set_ip6(const sai_thrift_ip6_t& val);

  bool operator == (const sai_thrift_acl_mask_t & rhs) const
  {
    if (!(u8 == rhs.u8))
      return false;
    if (!(s8 == rhs.s8))
      return false;
    if (!(u16 == rhs.u16))
      return false;
    if (!(s16 == rhs.s16))
      return false;
    if (!(u32 == rhs.u32))
      return false;
    if (!(s32 == rhs.s32))
      return false;
    if (!(mac == rhs.mac))
      return false;
    if (!(ip4 == rhs.ip4))
      return false;
    if (!(ip6 == rhs.ip6))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_acl_mask_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_acl_mask_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_acl_mask_t &a, sai_thrift_acl_mask_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_mask_t& obj);

typedef struct _sai_thrift_acl_data_t__isset {
  _sai_thrift_acl_data_t__isset() : u8(false), s8(false), u16(false), s16(false), u32(false), s32(false), mac(false), ip4(false), ip6(false), oid(false), objlist(false) {}
  bool u8 :1;
  bool s8 :1;
  bool u16 :1;
  bool s16 :1;
  bool u32 :1;
  bool s32 :1;
  bool mac :1;
  bool ip4 :1;
  bool ip6 :1;
  bool oid :1;
  bool objlist :1;
} _sai_thrift_acl_data_t__isset;

class sai_thrift_acl_data_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_acl_data_t(const sai_thrift_acl_data_t&);
  sai_thrift_acl_data_t& operator=(const sai_thrift_acl_data_t&);
  sai_thrift_acl_data_t() noexcept
                        : u8(0),
                          s8(0),
                          u16(0),
                          s16(0),
                          u32(0),
                          s32(0),
                          mac(),
                          ip4(),
                          ip6(),
                          oid(0) {
  }

  virtual ~sai_thrift_acl_data_t() noexcept;
  int8_t u8;
  int8_t s8;
  int16_t u16;
  int16_t s16;
  int32_t u32;
  int32_t s32;
  sai_thrift_mac_t mac;
  sai_thrift_ip4_t ip4;
  sai_thrift_ip6_t ip6;
  sai_thrift_object_id_t oid;
  sai_thrift_object_list_t objlist;

  _sai_thrift_acl_data_t__isset __isset;

  void __set_u8(const int8_t val);

  void __set_s8(const int8_t val);

  void __set_u16(const int16_t val);

  void __set_s16(const int16_t val);

  void __set_u32(const int32_t val);

  void __set_s32(const int32_t val);

  void __set_mac(const sai_thrift_mac_t& val);

  void __set_ip4(const sai_thrift_ip4_t& val);

  void __set_ip6(const sai_thrift_ip6_t& val);

  void __set_oid(const sai_thrift_object_id_t val);

  void __set_objlist(const sai_thrift_object_list_t& val);

  bool operator == (const sai_thrift_acl_data_t & rhs) const
  {
    if (!(u8 == rhs.u8))
      return false;
    if (!(s8 == rhs.s8))
      return false;
    if (!(u16 == rhs.u16))
      return false;
    if (!(s16 == rhs.s16))
      return false;
    if (!(u32 == rhs.u32))
      return false;
    if (!(s32 == rhs.s32))
      return false;
    if (!(mac == rhs.mac))
      return false;
    if (!(ip4 == rhs.ip4))
      return false;
    if (!(ip6 == rhs.ip6))
      return false;
    if (!(oid == rhs.oid))
      return false;
    if (!(objlist == rhs.objlist))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_acl_data_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_acl_data_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_acl_data_t &a, sai_thrift_acl_data_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_data_t& obj);

typedef struct _sai_thrift_acl_field_data_t__isset {
  _sai_thrift_acl_field_data_t__isset() : enable(false), mask(false), data(false) {}
  bool enable :1;
  bool mask :1;
  bool data :1;
} _sai_thrift_acl_field_data_t__isset;

class sai_thrift_acl_field_data_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_acl_field_data_t(const sai_thrift_acl_field_data_t&);
  sai_thrift_acl_field_data_t& operator=(const sai_thrift_acl_field_data_t&);
  sai_thrift_acl_field_data_t() noexcept
                              : enable(0) {
  }

  virtual ~sai_thrift_acl_field_data_t() noexcept;
  bool enable;
  sai_thrift_acl_mask_t mask;
  sai_thrift_acl_data_t data;

  _sai_thrift_acl_field_data_t__isset __isset;

  void __set_enable(const bool val);

  void __set_mask(const sai_thrift_acl_mask_t& val);

  void __set_data(const sai_thrift_acl_data_t& val);

  bool operator == (const sai_thrift_acl_field_data_t & rhs) const
  {
    if (!(enable == rhs.enable))
      return false;
    if (!(mask == rhs.mask))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_acl_field_data_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_acl_field_data_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_acl_field_data_t &a, sai_thrift_acl_field_data_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_field_data_t& obj);

typedef struct _sai_thrift_acl_parameter_t__isset {
  _sai_thrift_acl_parameter_t__isset() : u8(false), s8(false), u16(false), s16(false), u32(false), s32(false), mac(false), ip4(false), ip6(false), oid(false), objlist(false) {}
  bool u8 :1;
  bool s8 :1;
  bool u16 :1;
  bool s16 :1;
  bool u32 :1;
  bool s32 :1;
  bool mac :1;
  bool ip4 :1;
  bool ip6 :1;
  bool oid :1;
  bool objlist :1;
} _sai_thrift_acl_parameter_t__isset;

class sai_thrift_acl_parameter_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_acl_parameter_t(const sai_thrift_acl_parameter_t&);
  sai_thrift_acl_parameter_t& operator=(const sai_thrift_acl_parameter_t&);
  sai_thrift_acl_parameter_t() noexcept
                             : u8(0),
                               s8(0),
                               u16(0),
                               s16(0),
                               u32(0),
                               s32(0),
                               mac(),
                               ip4(),
                               ip6(),
                               oid(0) {
  }

  virtual ~sai_thrift_acl_parameter_t() noexcept;
  int8_t u8;
  int8_t s8;
  int16_t u16;
  int16_t s16;
  int32_t u32;
  int32_t s32;
  sai_thrift_mac_t mac;
  sai_thrift_ip4_t ip4;
  sai_thrift_ip6_t ip6;
  sai_thrift_object_id_t oid;
  sai_thrift_object_list_t objlist;

  _sai_thrift_acl_parameter_t__isset __isset;

  void __set_u8(const int8_t val);

  void __set_s8(const int8_t val);

  void __set_u16(const int16_t val);

  void __set_s16(const int16_t val);

  void __set_u32(const int32_t val);

  void __set_s32(const int32_t val);

  void __set_mac(const sai_thrift_mac_t& val);

  void __set_ip4(const sai_thrift_ip4_t& val);

  void __set_ip6(const sai_thrift_ip6_t& val);

  void __set_oid(const sai_thrift_object_id_t val);

  void __set_objlist(const sai_thrift_object_list_t& val);

  bool operator == (const sai_thrift_acl_parameter_t & rhs) const
  {
    if (!(u8 == rhs.u8))
      return false;
    if (!(s8 == rhs.s8))
      return false;
    if (!(u16 == rhs.u16))
      return false;
    if (!(s16 == rhs.s16))
      return false;
    if (!(u32 == rhs.u32))
      return false;
    if (!(s32 == rhs.s32))
      return false;
    if (!(mac == rhs.mac))
      return false;
    if (!(ip4 == rhs.ip4))
      return false;
    if (!(ip6 == rhs.ip6))
      return false;
    if (!(oid == rhs.oid))
      return false;
    if (!(objlist == rhs.objlist))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_acl_parameter_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_acl_parameter_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_acl_parameter_t &a, sai_thrift_acl_parameter_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_parameter_t& obj);

typedef struct _sai_thrift_acl_action_data_t__isset {
  _sai_thrift_acl_action_data_t__isset() : enable(false), parameter(false) {}
  bool enable :1;
  bool parameter :1;
} _sai_thrift_acl_action_data_t__isset;

class sai_thrift_acl_action_data_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_acl_action_data_t(const sai_thrift_acl_action_data_t&);
  sai_thrift_acl_action_data_t& operator=(const sai_thrift_acl_action_data_t&);
  sai_thrift_acl_action_data_t() noexcept
                               : enable(0) {
  }

  virtual ~sai_thrift_acl_action_data_t() noexcept;
  bool enable;
  sai_thrift_acl_parameter_t parameter;

  _sai_thrift_acl_action_data_t__isset __isset;

  void __set_enable(const bool val);

  void __set_parameter(const sai_thrift_acl_parameter_t& val);

  bool operator == (const sai_thrift_acl_action_data_t & rhs) const
  {
    if (!(enable == rhs.enable))
      return false;
    if (!(parameter == rhs.parameter))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_acl_action_data_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_acl_action_data_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_acl_action_data_t &a, sai_thrift_acl_action_data_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_action_data_t& obj);

typedef struct _sai_thrift_u32_list_t__isset {
  _sai_thrift_u32_list_t__isset() : count(false), u32list(false) {}
  bool count :1;
  bool u32list :1;
} _sai_thrift_u32_list_t__isset;

class sai_thrift_u32_list_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_u32_list_t(const sai_thrift_u32_list_t&);
  sai_thrift_u32_list_t& operator=(const sai_thrift_u32_list_t&);
  sai_thrift_u32_list_t() noexcept
                        : count(0) {
  }

  virtual ~sai_thrift_u32_list_t() noexcept;
  int32_t count;
  std::vector<int32_t>  u32list;

  _sai_thrift_u32_list_t__isset __isset;

  void __set_count(const int32_t val);

  void __set_u32list(const std::vector<int32_t> & val);

  bool operator == (const sai_thrift_u32_list_t & rhs) const
  {
    if (!(count == rhs.count))
      return false;
    if (!(u32list == rhs.u32list))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_u32_list_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_u32_list_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_u32_list_t &a, sai_thrift_u32_list_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_u32_list_t& obj);

typedef struct _sai_thrift_qos_map_params_t__isset {
  _sai_thrift_qos_map_params_t__isset() : tc(false), dscp(false), dot1p(false), prio(false), pg(false), queue_index(false), color(false) {}
  bool tc :1;
  bool dscp :1;
  bool dot1p :1;
  bool prio :1;
  bool pg :1;
  bool queue_index :1;
  bool color :1;
} _sai_thrift_qos_map_params_t__isset;

class sai_thrift_qos_map_params_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_qos_map_params_t(const sai_thrift_qos_map_params_t&) noexcept;
  sai_thrift_qos_map_params_t& operator=(const sai_thrift_qos_map_params_t&) noexcept;
  sai_thrift_qos_map_params_t() noexcept
                              : tc(0),
                                dscp(0),
                                dot1p(0),
                                prio(0),
                                pg(0),
                                queue_index(0),
                                color(0) {
  }

  virtual ~sai_thrift_qos_map_params_t() noexcept;
  int8_t tc;
  int8_t dscp;
  int8_t dot1p;
  int8_t prio;
  int8_t pg;
  int8_t queue_index;
  int8_t color;

  _sai_thrift_qos_map_params_t__isset __isset;

  void __set_tc(const int8_t val);

  void __set_dscp(const int8_t val);

  void __set_dot1p(const int8_t val);

  void __set_prio(const int8_t val);

  void __set_pg(const int8_t val);

  void __set_queue_index(const int8_t val);

  void __set_color(const int8_t val);

  bool operator == (const sai_thrift_qos_map_params_t & rhs) const
  {
    if (!(tc == rhs.tc))
      return false;
    if (!(dscp == rhs.dscp))
      return false;
    if (!(dot1p == rhs.dot1p))
      return false;
    if (!(prio == rhs.prio))
      return false;
    if (!(pg == rhs.pg))
      return false;
    if (!(queue_index == rhs.queue_index))
      return false;
    if (!(color == rhs.color))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_qos_map_params_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_qos_map_params_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_qos_map_params_t &a, sai_thrift_qos_map_params_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_qos_map_params_t& obj);

typedef struct _sai_thrift_qos_map_t__isset {
  _sai_thrift_qos_map_t__isset() : key(false), value(false) {}
  bool key :1;
  bool value :1;
} _sai_thrift_qos_map_t__isset;

class sai_thrift_qos_map_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_qos_map_t(const sai_thrift_qos_map_t&) noexcept;
  sai_thrift_qos_map_t& operator=(const sai_thrift_qos_map_t&) noexcept;
  sai_thrift_qos_map_t() noexcept {
  }

  virtual ~sai_thrift_qos_map_t() noexcept;
  sai_thrift_qos_map_params_t key;
  sai_thrift_qos_map_params_t value;

  _sai_thrift_qos_map_t__isset __isset;

  void __set_key(const sai_thrift_qos_map_params_t& val);

  void __set_value(const sai_thrift_qos_map_params_t& val);

  bool operator == (const sai_thrift_qos_map_t & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_qos_map_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_qos_map_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_qos_map_t &a, sai_thrift_qos_map_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_qos_map_t& obj);

typedef struct _sai_thrift_qos_map_list_t__isset {
  _sai_thrift_qos_map_list_t__isset() : count(false), map_list(false) {}
  bool count :1;
  bool map_list :1;
} _sai_thrift_qos_map_list_t__isset;

class sai_thrift_qos_map_list_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_qos_map_list_t(const sai_thrift_qos_map_list_t&);
  sai_thrift_qos_map_list_t& operator=(const sai_thrift_qos_map_list_t&);
  sai_thrift_qos_map_list_t() noexcept
                            : count(0) {
  }

  virtual ~sai_thrift_qos_map_list_t() noexcept;
  int32_t count;
  std::vector<sai_thrift_qos_map_t>  map_list;

  _sai_thrift_qos_map_list_t__isset __isset;

  void __set_count(const int32_t val);

  void __set_map_list(const std::vector<sai_thrift_qos_map_t> & val);

  bool operator == (const sai_thrift_qos_map_list_t & rhs) const
  {
    if (!(count == rhs.count))
      return false;
    if (!(map_list == rhs.map_list))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_qos_map_list_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_qos_map_list_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_qos_map_list_t &a, sai_thrift_qos_map_list_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_qos_map_list_t& obj);

typedef struct _sai_thrift_fdb_values_t__isset {
  _sai_thrift_fdb_values_t__isset() : bport_id(false), thrift_fdb_entry(false) {}
  bool bport_id :1;
  bool thrift_fdb_entry :1;
} _sai_thrift_fdb_values_t__isset;

class sai_thrift_fdb_values_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_fdb_values_t(const sai_thrift_fdb_values_t&);
  sai_thrift_fdb_values_t& operator=(const sai_thrift_fdb_values_t&);
  sai_thrift_fdb_values_t() noexcept
                          : bport_id(0) {
  }

  virtual ~sai_thrift_fdb_values_t() noexcept;
  sai_thrift_object_id_t bport_id;
  sai_thrift_fdb_entry_t thrift_fdb_entry;

  _sai_thrift_fdb_values_t__isset __isset;

  void __set_bport_id(const sai_thrift_object_id_t val);

  void __set_thrift_fdb_entry(const sai_thrift_fdb_entry_t& val);

  bool operator == (const sai_thrift_fdb_values_t & rhs) const
  {
    if (!(bport_id == rhs.bport_id))
      return false;
    if (!(thrift_fdb_entry == rhs.thrift_fdb_entry))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_fdb_values_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_fdb_values_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_fdb_values_t &a, sai_thrift_fdb_values_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_fdb_values_t& obj);

typedef struct _sai_thrift_attribute_value_t__isset {
  _sai_thrift_attribute_value_t__isset() : booldata(false), chardata(false), u8(false), s8(false), u16(false), s16(false), u32(false), s32(false), u64(false), s64(false), mac(false), oid(false), ip4(false), ip6(false), ipaddr(false), objlist(false), vlanlist(false), aclfield(false), aclaction(false), u32list(false), s32list(false), qosmap(false), fdb_values(false) {}
  bool booldata :1;
  bool chardata :1;
  bool u8 :1;
  bool s8 :1;
  bool u16 :1;
  bool s16 :1;
  bool u32 :1;
  bool s32 :1;
  bool u64 :1;
  bool s64 :1;
  bool mac :1;
  bool oid :1;
  bool ip4 :1;
  bool ip6 :1;
  bool ipaddr :1;
  bool objlist :1;
  bool vlanlist :1;
  bool aclfield :1;
  bool aclaction :1;
  bool u32list :1;
  bool s32list :1;
  bool qosmap :1;
  bool fdb_values :1;
} _sai_thrift_attribute_value_t__isset;

class sai_thrift_attribute_value_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_attribute_value_t(const sai_thrift_attribute_value_t&);
  sai_thrift_attribute_value_t& operator=(const sai_thrift_attribute_value_t&);
  sai_thrift_attribute_value_t() noexcept
                               : booldata(0),
                                 chardata(),
                                 u8(0),
                                 s8(0),
                                 u16(0),
                                 s16(0),
                                 u32(0),
                                 s32(0),
                                 u64(0),
                                 s64(0),
                                 mac(),
                                 oid(0),
                                 ip4(),
                                 ip6() {
  }

  virtual ~sai_thrift_attribute_value_t() noexcept;
  bool booldata;
  std::string chardata;
  int8_t u8;
  int8_t s8;
  int16_t u16;
  int16_t s16;
  int32_t u32;
  int32_t s32;
  int64_t u64;
  int64_t s64;
  sai_thrift_mac_t mac;
  sai_thrift_object_id_t oid;
  sai_thrift_ip4_t ip4;
  sai_thrift_ip6_t ip6;
  sai_thrift_ip_address_t ipaddr;
  sai_thrift_object_list_t objlist;
  sai_thrift_vlan_list_t vlanlist;
  sai_thrift_acl_field_data_t aclfield;
  sai_thrift_acl_action_data_t aclaction;
  sai_thrift_u32_list_t u32list;
  sai_thrift_s32_list_t s32list;
  sai_thrift_qos_map_list_t qosmap;
  sai_thrift_fdb_values_t fdb_values;

  _sai_thrift_attribute_value_t__isset __isset;

  void __set_booldata(const bool val);

  void __set_chardata(const std::string& val);

  void __set_u8(const int8_t val);

  void __set_s8(const int8_t val);

  void __set_u16(const int16_t val);

  void __set_s16(const int16_t val);

  void __set_u32(const int32_t val);

  void __set_s32(const int32_t val);

  void __set_u64(const int64_t val);

  void __set_s64(const int64_t val);

  void __set_mac(const sai_thrift_mac_t& val);

  void __set_oid(const sai_thrift_object_id_t val);

  void __set_ip4(const sai_thrift_ip4_t& val);

  void __set_ip6(const sai_thrift_ip6_t& val);

  void __set_ipaddr(const sai_thrift_ip_address_t& val);

  void __set_objlist(const sai_thrift_object_list_t& val);

  void __set_vlanlist(const sai_thrift_vlan_list_t& val);

  void __set_aclfield(const sai_thrift_acl_field_data_t& val);

  void __set_aclaction(const sai_thrift_acl_action_data_t& val);

  void __set_u32list(const sai_thrift_u32_list_t& val);

  void __set_s32list(const sai_thrift_s32_list_t& val);

  void __set_qosmap(const sai_thrift_qos_map_list_t& val);

  void __set_fdb_values(const sai_thrift_fdb_values_t& val);

  bool operator == (const sai_thrift_attribute_value_t & rhs) const
  {
    if (!(booldata == rhs.booldata))
      return false;
    if (!(chardata == rhs.chardata))
      return false;
    if (!(u8 == rhs.u8))
      return false;
    if (!(s8 == rhs.s8))
      return false;
    if (!(u16 == rhs.u16))
      return false;
    if (!(s16 == rhs.s16))
      return false;
    if (!(u32 == rhs.u32))
      return false;
    if (!(s32 == rhs.s32))
      return false;
    if (!(u64 == rhs.u64))
      return false;
    if (!(s64 == rhs.s64))
      return false;
    if (!(mac == rhs.mac))
      return false;
    if (!(oid == rhs.oid))
      return false;
    if (!(ip4 == rhs.ip4))
      return false;
    if (!(ip6 == rhs.ip6))
      return false;
    if (!(ipaddr == rhs.ipaddr))
      return false;
    if (!(objlist == rhs.objlist))
      return false;
    if (!(vlanlist == rhs.vlanlist))
      return false;
    if (!(aclfield == rhs.aclfield))
      return false;
    if (!(aclaction == rhs.aclaction))
      return false;
    if (!(u32list == rhs.u32list))
      return false;
    if (!(s32list == rhs.s32list))
      return false;
    if (!(qosmap == rhs.qosmap))
      return false;
    if (!(fdb_values == rhs.fdb_values))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_attribute_value_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_attribute_value_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_attribute_value_t &a, sai_thrift_attribute_value_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_attribute_value_t& obj);

typedef struct _sai_thrift_attribute_t__isset {
  _sai_thrift_attribute_t__isset() : id(false), value(false) {}
  bool id :1;
  bool value :1;
} _sai_thrift_attribute_t__isset;

class sai_thrift_attribute_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_attribute_t(const sai_thrift_attribute_t&);
  sai_thrift_attribute_t& operator=(const sai_thrift_attribute_t&);
  sai_thrift_attribute_t() noexcept
                         : id(0) {
  }

  virtual ~sai_thrift_attribute_t() noexcept;
  int32_t id;
  sai_thrift_attribute_value_t value;

  _sai_thrift_attribute_t__isset __isset;

  void __set_id(const int32_t val);

  void __set_value(const sai_thrift_attribute_value_t& val);

  bool operator == (const sai_thrift_attribute_t & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_attribute_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_attribute_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_attribute_t &a, sai_thrift_attribute_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_attribute_t& obj);

typedef struct _sai_thrift_route_entry_t__isset {
  _sai_thrift_route_entry_t__isset() : vr_id(false), destination(false) {}
  bool vr_id :1;
  bool destination :1;
} _sai_thrift_route_entry_t__isset;

class sai_thrift_route_entry_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_route_entry_t(const sai_thrift_route_entry_t&);
  sai_thrift_route_entry_t& operator=(const sai_thrift_route_entry_t&);
  sai_thrift_route_entry_t() noexcept
                           : vr_id(0) {
  }

  virtual ~sai_thrift_route_entry_t() noexcept;
  sai_thrift_object_id_t vr_id;
  sai_thrift_ip_prefix_t destination;

  _sai_thrift_route_entry_t__isset __isset;

  void __set_vr_id(const sai_thrift_object_id_t val);

  void __set_destination(const sai_thrift_ip_prefix_t& val);

  bool operator == (const sai_thrift_route_entry_t & rhs) const
  {
    if (!(vr_id == rhs.vr_id))
      return false;
    if (!(destination == rhs.destination))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_route_entry_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_route_entry_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_route_entry_t &a, sai_thrift_route_entry_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_route_entry_t& obj);

typedef struct _sai_thrift_neighbor_entry_t__isset {
  _sai_thrift_neighbor_entry_t__isset() : rif_id(false), ip_address(false) {}
  bool rif_id :1;
  bool ip_address :1;
} _sai_thrift_neighbor_entry_t__isset;

class sai_thrift_neighbor_entry_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_neighbor_entry_t(const sai_thrift_neighbor_entry_t&);
  sai_thrift_neighbor_entry_t& operator=(const sai_thrift_neighbor_entry_t&);
  sai_thrift_neighbor_entry_t() noexcept
                              : rif_id(0) {
  }

  virtual ~sai_thrift_neighbor_entry_t() noexcept;
  sai_thrift_object_id_t rif_id;
  sai_thrift_ip_address_t ip_address;

  _sai_thrift_neighbor_entry_t__isset __isset;

  void __set_rif_id(const sai_thrift_object_id_t val);

  void __set_ip_address(const sai_thrift_ip_address_t& val);

  bool operator == (const sai_thrift_neighbor_entry_t & rhs) const
  {
    if (!(rif_id == rhs.rif_id))
      return false;
    if (!(ip_address == rhs.ip_address))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_neighbor_entry_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_neighbor_entry_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_neighbor_entry_t &a, sai_thrift_neighbor_entry_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_neighbor_entry_t& obj);

typedef struct _sai_thrift_attribute_list_t__isset {
  _sai_thrift_attribute_list_t__isset() : attr_list(false), attr_count(false) {}
  bool attr_list :1;
  bool attr_count :1;
} _sai_thrift_attribute_list_t__isset;

class sai_thrift_attribute_list_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_attribute_list_t(const sai_thrift_attribute_list_t&);
  sai_thrift_attribute_list_t& operator=(const sai_thrift_attribute_list_t&);
  sai_thrift_attribute_list_t() noexcept
                              : attr_count(0) {
  }

  virtual ~sai_thrift_attribute_list_t() noexcept;
  std::vector<sai_thrift_attribute_t>  attr_list;
  int32_t attr_count;

  _sai_thrift_attribute_list_t__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  void __set_attr_count(const int32_t val);

  bool operator == (const sai_thrift_attribute_list_t & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    if (!(attr_count == rhs.attr_count))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_attribute_list_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_attribute_list_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_attribute_list_t &a, sai_thrift_attribute_list_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_attribute_list_t& obj);

typedef struct _sai_thrift_result_data_t__isset {
  _sai_thrift_result_data_t__isset() : objlist(false), oid(false), u16(false) {}
  bool objlist :1;
  bool oid :1;
  bool u16 :1;
} _sai_thrift_result_data_t__isset;

class sai_thrift_result_data_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_result_data_t(const sai_thrift_result_data_t&);
  sai_thrift_result_data_t& operator=(const sai_thrift_result_data_t&);
  sai_thrift_result_data_t() noexcept
                           : oid(0),
                             u16(0) {
  }

  virtual ~sai_thrift_result_data_t() noexcept;
  sai_thrift_object_list_t objlist;
  sai_thrift_object_id_t oid;
  int16_t u16;

  _sai_thrift_result_data_t__isset __isset;

  void __set_objlist(const sai_thrift_object_list_t& val);

  void __set_oid(const sai_thrift_object_id_t val);

  void __set_u16(const int16_t val);

  bool operator == (const sai_thrift_result_data_t & rhs) const
  {
    if (!(objlist == rhs.objlist))
      return false;
    if (!(oid == rhs.oid))
      return false;
    if (!(u16 == rhs.u16))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_result_data_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_result_data_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_result_data_t &a, sai_thrift_result_data_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_result_data_t& obj);

typedef struct _sai_thrift_result_t__isset {
  _sai_thrift_result_t__isset() : data(false), status(false) {}
  bool data :1;
  bool status :1;
} _sai_thrift_result_t__isset;

class sai_thrift_result_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_result_t(const sai_thrift_result_t&);
  sai_thrift_result_t& operator=(const sai_thrift_result_t&);
  sai_thrift_result_t() noexcept
                      : status(0) {
  }

  virtual ~sai_thrift_result_t() noexcept;
  sai_thrift_result_data_t data;
  sai_thrift_status_t status;

  _sai_thrift_result_t__isset __isset;

  void __set_data(const sai_thrift_result_data_t& val);

  void __set_status(const sai_thrift_status_t val);

  bool operator == (const sai_thrift_result_t & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_result_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_result_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_result_t &a, sai_thrift_result_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_result_t& obj);

} // namespace

#endif
