/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "switch_sai_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace switch_sai {


sai_thrift_fdb_entry_t::~sai_thrift_fdb_entry_t() noexcept {
}


void sai_thrift_fdb_entry_t::__set_mac_address(const sai_thrift_mac_t& val) {
  this->mac_address = val;
}

void sai_thrift_fdb_entry_t::__set_bv_id(const sai_thrift_object_id_t val) {
  this->bv_id = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_fdb_entry_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_fdb_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mac_address);
          this->__isset.mac_address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bv_id);
          this->__isset.bv_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_fdb_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_fdb_entry_t");

  xfer += oprot->writeFieldBegin("mac_address", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->mac_address);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bv_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->bv_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_fdb_entry_t &a, sai_thrift_fdb_entry_t &b) {
  using ::std::swap;
  swap(a.mac_address, b.mac_address);
  swap(a.bv_id, b.bv_id);
  swap(a.__isset, b.__isset);
}

sai_thrift_fdb_entry_t::sai_thrift_fdb_entry_t(const sai_thrift_fdb_entry_t& other0) {
  mac_address = other0.mac_address;
  bv_id = other0.bv_id;
  __isset = other0.__isset;
}
sai_thrift_fdb_entry_t& sai_thrift_fdb_entry_t::operator=(const sai_thrift_fdb_entry_t& other1) {
  mac_address = other1.mac_address;
  bv_id = other1.bv_id;
  __isset = other1.__isset;
  return *this;
}
void sai_thrift_fdb_entry_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_fdb_entry_t(";
  out << "mac_address=" << to_string(mac_address);
  out << ", " << "bv_id=" << to_string(bv_id);
  out << ")";
}


sai_thrift_vlan_port_t::~sai_thrift_vlan_port_t() noexcept {
}


void sai_thrift_vlan_port_t::__set_port_id(const sai_thrift_object_id_t val) {
  this->port_id = val;
}

void sai_thrift_vlan_port_t::__set_tagging_mode(const sai_thrift_vlan_tagging_mode_t val) {
  this->tagging_mode = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_vlan_port_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_vlan_port_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->port_id);
          this->__isset.port_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->tagging_mode);
          this->__isset.tagging_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_vlan_port_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_vlan_port_t");

  xfer += oprot->writeFieldBegin("port_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->port_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tagging_mode", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->tagging_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_vlan_port_t &a, sai_thrift_vlan_port_t &b) {
  using ::std::swap;
  swap(a.port_id, b.port_id);
  swap(a.tagging_mode, b.tagging_mode);
  swap(a.__isset, b.__isset);
}

sai_thrift_vlan_port_t::sai_thrift_vlan_port_t(const sai_thrift_vlan_port_t& other2) noexcept {
  port_id = other2.port_id;
  tagging_mode = other2.tagging_mode;
  __isset = other2.__isset;
}
sai_thrift_vlan_port_t& sai_thrift_vlan_port_t::operator=(const sai_thrift_vlan_port_t& other3) noexcept {
  port_id = other3.port_id;
  tagging_mode = other3.tagging_mode;
  __isset = other3.__isset;
  return *this;
}
void sai_thrift_vlan_port_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_vlan_port_t(";
  out << "port_id=" << to_string(port_id);
  out << ", " << "tagging_mode=" << to_string(tagging_mode);
  out << ")";
}


sai_thrift_ip_t::~sai_thrift_ip_t() noexcept {
}


void sai_thrift_ip_t::__set_ip4(const sai_thrift_ip4_t& val) {
  this->ip4 = val;
}

void sai_thrift_ip_t::__set_ip6(const sai_thrift_ip6_t& val) {
  this->ip6 = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_ip_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_ip_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip4);
          this->__isset.ip4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip6);
          this->__isset.ip6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_ip_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_ip_t");

  xfer += oprot->writeFieldBegin("ip4", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->ip4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip6", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->ip6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_ip_t &a, sai_thrift_ip_t &b) {
  using ::std::swap;
  swap(a.ip4, b.ip4);
  swap(a.ip6, b.ip6);
  swap(a.__isset, b.__isset);
}

sai_thrift_ip_t::sai_thrift_ip_t(const sai_thrift_ip_t& other4) {
  ip4 = other4.ip4;
  ip6 = other4.ip6;
  __isset = other4.__isset;
}
sai_thrift_ip_t& sai_thrift_ip_t::operator=(const sai_thrift_ip_t& other5) {
  ip4 = other5.ip4;
  ip6 = other5.ip6;
  __isset = other5.__isset;
  return *this;
}
void sai_thrift_ip_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_ip_t(";
  out << "ip4=" << to_string(ip4);
  out << ", " << "ip6=" << to_string(ip6);
  out << ")";
}


sai_thrift_ip_address_t::~sai_thrift_ip_address_t() noexcept {
}


void sai_thrift_ip_address_t::__set_addr_family(const sai_thrift_ip_addr_family_t val) {
  this->addr_family = val;
}

void sai_thrift_ip_address_t::__set_addr(const sai_thrift_ip_t& val) {
  this->addr = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_ip_address_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_ip_address_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->addr_family);
          this->__isset.addr_family = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->addr.read(iprot);
          this->__isset.addr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_ip_address_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_ip_address_t");

  xfer += oprot->writeFieldBegin("addr_family", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->addr_family);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("addr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->addr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_ip_address_t &a, sai_thrift_ip_address_t &b) {
  using ::std::swap;
  swap(a.addr_family, b.addr_family);
  swap(a.addr, b.addr);
  swap(a.__isset, b.__isset);
}

sai_thrift_ip_address_t::sai_thrift_ip_address_t(const sai_thrift_ip_address_t& other6) {
  addr_family = other6.addr_family;
  addr = other6.addr;
  __isset = other6.__isset;
}
sai_thrift_ip_address_t& sai_thrift_ip_address_t::operator=(const sai_thrift_ip_address_t& other7) {
  addr_family = other7.addr_family;
  addr = other7.addr;
  __isset = other7.__isset;
  return *this;
}
void sai_thrift_ip_address_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_ip_address_t(";
  out << "addr_family=" << to_string(addr_family);
  out << ", " << "addr=" << to_string(addr);
  out << ")";
}


sai_thrift_ip_prefix_t::~sai_thrift_ip_prefix_t() noexcept {
}


void sai_thrift_ip_prefix_t::__set_addr_family(const sai_thrift_ip_addr_family_t val) {
  this->addr_family = val;
}

void sai_thrift_ip_prefix_t::__set_addr(const sai_thrift_ip_t& val) {
  this->addr = val;
}

void sai_thrift_ip_prefix_t::__set_mask(const sai_thrift_ip_t& val) {
  this->mask = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_ip_prefix_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_ip_prefix_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->addr_family);
          this->__isset.addr_family = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->addr.read(iprot);
          this->__isset.addr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->mask.read(iprot);
          this->__isset.mask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_ip_prefix_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_ip_prefix_t");

  xfer += oprot->writeFieldBegin("addr_family", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->addr_family);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("addr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->addr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mask", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->mask.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_ip_prefix_t &a, sai_thrift_ip_prefix_t &b) {
  using ::std::swap;
  swap(a.addr_family, b.addr_family);
  swap(a.addr, b.addr);
  swap(a.mask, b.mask);
  swap(a.__isset, b.__isset);
}

sai_thrift_ip_prefix_t::sai_thrift_ip_prefix_t(const sai_thrift_ip_prefix_t& other8) {
  addr_family = other8.addr_family;
  addr = other8.addr;
  mask = other8.mask;
  __isset = other8.__isset;
}
sai_thrift_ip_prefix_t& sai_thrift_ip_prefix_t::operator=(const sai_thrift_ip_prefix_t& other9) {
  addr_family = other9.addr_family;
  addr = other9.addr;
  mask = other9.mask;
  __isset = other9.__isset;
  return *this;
}
void sai_thrift_ip_prefix_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_ip_prefix_t(";
  out << "addr_family=" << to_string(addr_family);
  out << ", " << "addr=" << to_string(addr);
  out << ", " << "mask=" << to_string(mask);
  out << ")";
}


sai_thrift_object_list_t::~sai_thrift_object_list_t() noexcept {
}


void sai_thrift_object_list_t::__set_count(const int32_t val) {
  this->count = val;
}

void sai_thrift_object_list_t::__set_object_id_list(const std::vector<sai_thrift_object_id_t> & val) {
  this->object_id_list = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_object_list_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_object_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->object_id_list.clear();
            uint32_t _size10;
            ::apache::thrift::protocol::TType _etype13;
            xfer += iprot->readListBegin(_etype13, _size10);
            this->object_id_list.resize(_size10);
            uint32_t _i14;
            for (_i14 = 0; _i14 < _size10; ++_i14)
            {
              xfer += iprot->readI64(this->object_id_list[_i14]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.object_id_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_object_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_object_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("object_id_list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->object_id_list.size()));
    std::vector<sai_thrift_object_id_t> ::const_iterator _iter15;
    for (_iter15 = this->object_id_list.begin(); _iter15 != this->object_id_list.end(); ++_iter15)
    {
      xfer += oprot->writeI64((*_iter15));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_object_list_t &a, sai_thrift_object_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.object_id_list, b.object_id_list);
  swap(a.__isset, b.__isset);
}

sai_thrift_object_list_t::sai_thrift_object_list_t(const sai_thrift_object_list_t& other16) {
  count = other16.count;
  object_id_list = other16.object_id_list;
  __isset = other16.__isset;
}
sai_thrift_object_list_t& sai_thrift_object_list_t::operator=(const sai_thrift_object_list_t& other17) {
  count = other17.count;
  object_id_list = other17.object_id_list;
  __isset = other17.__isset;
  return *this;
}
void sai_thrift_object_list_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_object_list_t(";
  out << "count=" << to_string(count);
  out << ", " << "object_id_list=" << to_string(object_id_list);
  out << ")";
}


sai_thrift_vlan_list_t::~sai_thrift_vlan_list_t() noexcept {
}


void sai_thrift_vlan_list_t::__set_vlan_count(const int32_t val) {
  this->vlan_count = val;
}

void sai_thrift_vlan_list_t::__set_vlan_list(const std::vector<sai_thrift_vlan_id_t> & val) {
  this->vlan_list = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_vlan_list_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_vlan_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vlan_count);
          this->__isset.vlan_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->vlan_list.clear();
            uint32_t _size18;
            ::apache::thrift::protocol::TType _etype21;
            xfer += iprot->readListBegin(_etype21, _size18);
            this->vlan_list.resize(_size18);
            uint32_t _i22;
            for (_i22 = 0; _i22 < _size18; ++_i22)
            {
              xfer += iprot->readI16(this->vlan_list[_i22]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.vlan_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_vlan_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_vlan_list_t");

  xfer += oprot->writeFieldBegin("vlan_count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->vlan_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vlan_list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I16, static_cast<uint32_t>(this->vlan_list.size()));
    std::vector<sai_thrift_vlan_id_t> ::const_iterator _iter23;
    for (_iter23 = this->vlan_list.begin(); _iter23 != this->vlan_list.end(); ++_iter23)
    {
      xfer += oprot->writeI16((*_iter23));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_vlan_list_t &a, sai_thrift_vlan_list_t &b) {
  using ::std::swap;
  swap(a.vlan_count, b.vlan_count);
  swap(a.vlan_list, b.vlan_list);
  swap(a.__isset, b.__isset);
}

sai_thrift_vlan_list_t::sai_thrift_vlan_list_t(const sai_thrift_vlan_list_t& other24) {
  vlan_count = other24.vlan_count;
  vlan_list = other24.vlan_list;
  __isset = other24.__isset;
}
sai_thrift_vlan_list_t& sai_thrift_vlan_list_t::operator=(const sai_thrift_vlan_list_t& other25) {
  vlan_count = other25.vlan_count;
  vlan_list = other25.vlan_list;
  __isset = other25.__isset;
  return *this;
}
void sai_thrift_vlan_list_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_vlan_list_t(";
  out << "vlan_count=" << to_string(vlan_count);
  out << ", " << "vlan_list=" << to_string(vlan_list);
  out << ")";
}


sai_thrift_s32_list_t::~sai_thrift_s32_list_t() noexcept {
}


void sai_thrift_s32_list_t::__set_count(const int32_t val) {
  this->count = val;
}

void sai_thrift_s32_list_t::__set_s32list(const std::vector<int32_t> & val) {
  this->s32list = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_s32_list_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_s32_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->s32list.clear();
            uint32_t _size26;
            ::apache::thrift::protocol::TType _etype29;
            xfer += iprot->readListBegin(_etype29, _size26);
            this->s32list.resize(_size26);
            uint32_t _i30;
            for (_i30 = 0; _i30 < _size26; ++_i30)
            {
              xfer += iprot->readI32(this->s32list[_i30]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.s32list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_s32_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_s32_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s32list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->s32list.size()));
    std::vector<int32_t> ::const_iterator _iter31;
    for (_iter31 = this->s32list.begin(); _iter31 != this->s32list.end(); ++_iter31)
    {
      xfer += oprot->writeI32((*_iter31));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_s32_list_t &a, sai_thrift_s32_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.s32list, b.s32list);
  swap(a.__isset, b.__isset);
}

sai_thrift_s32_list_t::sai_thrift_s32_list_t(const sai_thrift_s32_list_t& other32) {
  count = other32.count;
  s32list = other32.s32list;
  __isset = other32.__isset;
}
sai_thrift_s32_list_t& sai_thrift_s32_list_t::operator=(const sai_thrift_s32_list_t& other33) {
  count = other33.count;
  s32list = other33.s32list;
  __isset = other33.__isset;
  return *this;
}
void sai_thrift_s32_list_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_s32_list_t(";
  out << "count=" << to_string(count);
  out << ", " << "s32list=" << to_string(s32list);
  out << ")";
}


sai_thrift_acl_mask_t::~sai_thrift_acl_mask_t() noexcept {
}


void sai_thrift_acl_mask_t::__set_u8(const int8_t val) {
  this->u8 = val;
}

void sai_thrift_acl_mask_t::__set_s8(const int8_t val) {
  this->s8 = val;
}

void sai_thrift_acl_mask_t::__set_u16(const int16_t val) {
  this->u16 = val;
}

void sai_thrift_acl_mask_t::__set_s16(const int16_t val) {
  this->s16 = val;
}

void sai_thrift_acl_mask_t::__set_u32(const int32_t val) {
  this->u32 = val;
}

void sai_thrift_acl_mask_t::__set_s32(const int32_t val) {
  this->s32 = val;
}

void sai_thrift_acl_mask_t::__set_mac(const sai_thrift_mac_t& val) {
  this->mac = val;
}

void sai_thrift_acl_mask_t::__set_ip4(const sai_thrift_ip4_t& val) {
  this->ip4 = val;
}

void sai_thrift_acl_mask_t::__set_ip6(const sai_thrift_ip6_t& val) {
  this->ip6 = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_mask_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_acl_mask_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->u8);
          this->__isset.u8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->s8);
          this->__isset.s8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->u16);
          this->__isset.u16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->s16);
          this->__isset.s16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->u32);
          this->__isset.u32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->s32);
          this->__isset.s32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mac);
          this->__isset.mac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip4);
          this->__isset.ip4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip6);
          this->__isset.ip6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_acl_mask_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_acl_mask_t");

  xfer += oprot->writeFieldBegin("u8", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->u8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s8", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->s8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u16", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->u16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s16", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->s16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u32", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->u32);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s32", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->s32);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mac", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->mac);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip4", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->ip4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip6", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->ip6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_acl_mask_t &a, sai_thrift_acl_mask_t &b) {
  using ::std::swap;
  swap(a.u8, b.u8);
  swap(a.s8, b.s8);
  swap(a.u16, b.u16);
  swap(a.s16, b.s16);
  swap(a.u32, b.u32);
  swap(a.s32, b.s32);
  swap(a.mac, b.mac);
  swap(a.ip4, b.ip4);
  swap(a.ip6, b.ip6);
  swap(a.__isset, b.__isset);
}

sai_thrift_acl_mask_t::sai_thrift_acl_mask_t(const sai_thrift_acl_mask_t& other34) {
  u8 = other34.u8;
  s8 = other34.s8;
  u16 = other34.u16;
  s16 = other34.s16;
  u32 = other34.u32;
  s32 = other34.s32;
  mac = other34.mac;
  ip4 = other34.ip4;
  ip6 = other34.ip6;
  __isset = other34.__isset;
}
sai_thrift_acl_mask_t& sai_thrift_acl_mask_t::operator=(const sai_thrift_acl_mask_t& other35) {
  u8 = other35.u8;
  s8 = other35.s8;
  u16 = other35.u16;
  s16 = other35.s16;
  u32 = other35.u32;
  s32 = other35.s32;
  mac = other35.mac;
  ip4 = other35.ip4;
  ip6 = other35.ip6;
  __isset = other35.__isset;
  return *this;
}
void sai_thrift_acl_mask_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_acl_mask_t(";
  out << "u8=" << to_string(u8);
  out << ", " << "s8=" << to_string(s8);
  out << ", " << "u16=" << to_string(u16);
  out << ", " << "s16=" << to_string(s16);
  out << ", " << "u32=" << to_string(u32);
  out << ", " << "s32=" << to_string(s32);
  out << ", " << "mac=" << to_string(mac);
  out << ", " << "ip4=" << to_string(ip4);
  out << ", " << "ip6=" << to_string(ip6);
  out << ")";
}


sai_thrift_acl_data_t::~sai_thrift_acl_data_t() noexcept {
}


void sai_thrift_acl_data_t::__set_u8(const int8_t val) {
  this->u8 = val;
}

void sai_thrift_acl_data_t::__set_s8(const int8_t val) {
  this->s8 = val;
}

void sai_thrift_acl_data_t::__set_u16(const int16_t val) {
  this->u16 = val;
}

void sai_thrift_acl_data_t::__set_s16(const int16_t val) {
  this->s16 = val;
}

void sai_thrift_acl_data_t::__set_u32(const int32_t val) {
  this->u32 = val;
}

void sai_thrift_acl_data_t::__set_s32(const int32_t val) {
  this->s32 = val;
}

void sai_thrift_acl_data_t::__set_mac(const sai_thrift_mac_t& val) {
  this->mac = val;
}

void sai_thrift_acl_data_t::__set_ip4(const sai_thrift_ip4_t& val) {
  this->ip4 = val;
}

void sai_thrift_acl_data_t::__set_ip6(const sai_thrift_ip6_t& val) {
  this->ip6 = val;
}

void sai_thrift_acl_data_t::__set_oid(const sai_thrift_object_id_t val) {
  this->oid = val;
}

void sai_thrift_acl_data_t::__set_objlist(const sai_thrift_object_list_t& val) {
  this->objlist = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_data_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_acl_data_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->u8);
          this->__isset.u8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->s8);
          this->__isset.s8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->u16);
          this->__isset.u16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->s16);
          this->__isset.s16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->u32);
          this->__isset.u32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->s32);
          this->__isset.s32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mac);
          this->__isset.mac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip4);
          this->__isset.ip4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip6);
          this->__isset.ip6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->oid);
          this->__isset.oid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->objlist.read(iprot);
          this->__isset.objlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_acl_data_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_acl_data_t");

  xfer += oprot->writeFieldBegin("u8", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->u8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s8", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->s8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u16", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->u16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s16", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->s16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u32", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->u32);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s32", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->s32);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mac", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->mac);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip4", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->ip4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip6", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->ip6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("oid", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->oid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("objlist", ::apache::thrift::protocol::T_STRUCT, 11);
  xfer += this->objlist.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_acl_data_t &a, sai_thrift_acl_data_t &b) {
  using ::std::swap;
  swap(a.u8, b.u8);
  swap(a.s8, b.s8);
  swap(a.u16, b.u16);
  swap(a.s16, b.s16);
  swap(a.u32, b.u32);
  swap(a.s32, b.s32);
  swap(a.mac, b.mac);
  swap(a.ip4, b.ip4);
  swap(a.ip6, b.ip6);
  swap(a.oid, b.oid);
  swap(a.objlist, b.objlist);
  swap(a.__isset, b.__isset);
}

sai_thrift_acl_data_t::sai_thrift_acl_data_t(const sai_thrift_acl_data_t& other36) {
  u8 = other36.u8;
  s8 = other36.s8;
  u16 = other36.u16;
  s16 = other36.s16;
  u32 = other36.u32;
  s32 = other36.s32;
  mac = other36.mac;
  ip4 = other36.ip4;
  ip6 = other36.ip6;
  oid = other36.oid;
  objlist = other36.objlist;
  __isset = other36.__isset;
}
sai_thrift_acl_data_t& sai_thrift_acl_data_t::operator=(const sai_thrift_acl_data_t& other37) {
  u8 = other37.u8;
  s8 = other37.s8;
  u16 = other37.u16;
  s16 = other37.s16;
  u32 = other37.u32;
  s32 = other37.s32;
  mac = other37.mac;
  ip4 = other37.ip4;
  ip6 = other37.ip6;
  oid = other37.oid;
  objlist = other37.objlist;
  __isset = other37.__isset;
  return *this;
}
void sai_thrift_acl_data_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_acl_data_t(";
  out << "u8=" << to_string(u8);
  out << ", " << "s8=" << to_string(s8);
  out << ", " << "u16=" << to_string(u16);
  out << ", " << "s16=" << to_string(s16);
  out << ", " << "u32=" << to_string(u32);
  out << ", " << "s32=" << to_string(s32);
  out << ", " << "mac=" << to_string(mac);
  out << ", " << "ip4=" << to_string(ip4);
  out << ", " << "ip6=" << to_string(ip6);
  out << ", " << "oid=" << to_string(oid);
  out << ", " << "objlist=" << to_string(objlist);
  out << ")";
}


sai_thrift_acl_field_data_t::~sai_thrift_acl_field_data_t() noexcept {
}


void sai_thrift_acl_field_data_t::__set_enable(const bool val) {
  this->enable = val;
}

void sai_thrift_acl_field_data_t::__set_mask(const sai_thrift_acl_mask_t& val) {
  this->mask = val;
}

void sai_thrift_acl_field_data_t::__set_data(const sai_thrift_acl_data_t& val) {
  this->data = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_field_data_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_acl_field_data_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable);
          this->__isset.enable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->mask.read(iprot);
          this->__isset.mask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data.read(iprot);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_acl_field_data_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_acl_field_data_t");

  xfer += oprot->writeFieldBegin("enable", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->enable);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mask", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->mask.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->data.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_acl_field_data_t &a, sai_thrift_acl_field_data_t &b) {
  using ::std::swap;
  swap(a.enable, b.enable);
  swap(a.mask, b.mask);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

sai_thrift_acl_field_data_t::sai_thrift_acl_field_data_t(const sai_thrift_acl_field_data_t& other38) {
  enable = other38.enable;
  mask = other38.mask;
  data = other38.data;
  __isset = other38.__isset;
}
sai_thrift_acl_field_data_t& sai_thrift_acl_field_data_t::operator=(const sai_thrift_acl_field_data_t& other39) {
  enable = other39.enable;
  mask = other39.mask;
  data = other39.data;
  __isset = other39.__isset;
  return *this;
}
void sai_thrift_acl_field_data_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_acl_field_data_t(";
  out << "enable=" << to_string(enable);
  out << ", " << "mask=" << to_string(mask);
  out << ", " << "data=" << to_string(data);
  out << ")";
}


sai_thrift_acl_parameter_t::~sai_thrift_acl_parameter_t() noexcept {
}


void sai_thrift_acl_parameter_t::__set_u8(const int8_t val) {
  this->u8 = val;
}

void sai_thrift_acl_parameter_t::__set_s8(const int8_t val) {
  this->s8 = val;
}

void sai_thrift_acl_parameter_t::__set_u16(const int16_t val) {
  this->u16 = val;
}

void sai_thrift_acl_parameter_t::__set_s16(const int16_t val) {
  this->s16 = val;
}

void sai_thrift_acl_parameter_t::__set_u32(const int32_t val) {
  this->u32 = val;
}

void sai_thrift_acl_parameter_t::__set_s32(const int32_t val) {
  this->s32 = val;
}

void sai_thrift_acl_parameter_t::__set_mac(const sai_thrift_mac_t& val) {
  this->mac = val;
}

void sai_thrift_acl_parameter_t::__set_ip4(const sai_thrift_ip4_t& val) {
  this->ip4 = val;
}

void sai_thrift_acl_parameter_t::__set_ip6(const sai_thrift_ip6_t& val) {
  this->ip6 = val;
}

void sai_thrift_acl_parameter_t::__set_oid(const sai_thrift_object_id_t val) {
  this->oid = val;
}

void sai_thrift_acl_parameter_t::__set_objlist(const sai_thrift_object_list_t& val) {
  this->objlist = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_parameter_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_acl_parameter_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->u8);
          this->__isset.u8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->s8);
          this->__isset.s8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->u16);
          this->__isset.u16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->s16);
          this->__isset.s16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->u32);
          this->__isset.u32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->s32);
          this->__isset.s32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mac);
          this->__isset.mac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip4);
          this->__isset.ip4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip6);
          this->__isset.ip6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->oid);
          this->__isset.oid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->objlist.read(iprot);
          this->__isset.objlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_acl_parameter_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_acl_parameter_t");

  xfer += oprot->writeFieldBegin("u8", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->u8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s8", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->s8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u16", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->u16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s16", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->s16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u32", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->u32);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s32", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->s32);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mac", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->mac);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip4", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->ip4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip6", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->ip6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("oid", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->oid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("objlist", ::apache::thrift::protocol::T_STRUCT, 11);
  xfer += this->objlist.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_acl_parameter_t &a, sai_thrift_acl_parameter_t &b) {
  using ::std::swap;
  swap(a.u8, b.u8);
  swap(a.s8, b.s8);
  swap(a.u16, b.u16);
  swap(a.s16, b.s16);
  swap(a.u32, b.u32);
  swap(a.s32, b.s32);
  swap(a.mac, b.mac);
  swap(a.ip4, b.ip4);
  swap(a.ip6, b.ip6);
  swap(a.oid, b.oid);
  swap(a.objlist, b.objlist);
  swap(a.__isset, b.__isset);
}

sai_thrift_acl_parameter_t::sai_thrift_acl_parameter_t(const sai_thrift_acl_parameter_t& other40) {
  u8 = other40.u8;
  s8 = other40.s8;
  u16 = other40.u16;
  s16 = other40.s16;
  u32 = other40.u32;
  s32 = other40.s32;
  mac = other40.mac;
  ip4 = other40.ip4;
  ip6 = other40.ip6;
  oid = other40.oid;
  objlist = other40.objlist;
  __isset = other40.__isset;
}
sai_thrift_acl_parameter_t& sai_thrift_acl_parameter_t::operator=(const sai_thrift_acl_parameter_t& other41) {
  u8 = other41.u8;
  s8 = other41.s8;
  u16 = other41.u16;
  s16 = other41.s16;
  u32 = other41.u32;
  s32 = other41.s32;
  mac = other41.mac;
  ip4 = other41.ip4;
  ip6 = other41.ip6;
  oid = other41.oid;
  objlist = other41.objlist;
  __isset = other41.__isset;
  return *this;
}
void sai_thrift_acl_parameter_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_acl_parameter_t(";
  out << "u8=" << to_string(u8);
  out << ", " << "s8=" << to_string(s8);
  out << ", " << "u16=" << to_string(u16);
  out << ", " << "s16=" << to_string(s16);
  out << ", " << "u32=" << to_string(u32);
  out << ", " << "s32=" << to_string(s32);
  out << ", " << "mac=" << to_string(mac);
  out << ", " << "ip4=" << to_string(ip4);
  out << ", " << "ip6=" << to_string(ip6);
  out << ", " << "oid=" << to_string(oid);
  out << ", " << "objlist=" << to_string(objlist);
  out << ")";
}


sai_thrift_acl_action_data_t::~sai_thrift_acl_action_data_t() noexcept {
}


void sai_thrift_acl_action_data_t::__set_enable(const bool val) {
  this->enable = val;
}

void sai_thrift_acl_action_data_t::__set_parameter(const sai_thrift_acl_parameter_t& val) {
  this->parameter = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_action_data_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_acl_action_data_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable);
          this->__isset.enable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->parameter.read(iprot);
          this->__isset.parameter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_acl_action_data_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_acl_action_data_t");

  xfer += oprot->writeFieldBegin("enable", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->enable);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parameter", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->parameter.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_acl_action_data_t &a, sai_thrift_acl_action_data_t &b) {
  using ::std::swap;
  swap(a.enable, b.enable);
  swap(a.parameter, b.parameter);
  swap(a.__isset, b.__isset);
}

sai_thrift_acl_action_data_t::sai_thrift_acl_action_data_t(const sai_thrift_acl_action_data_t& other42) {
  enable = other42.enable;
  parameter = other42.parameter;
  __isset = other42.__isset;
}
sai_thrift_acl_action_data_t& sai_thrift_acl_action_data_t::operator=(const sai_thrift_acl_action_data_t& other43) {
  enable = other43.enable;
  parameter = other43.parameter;
  __isset = other43.__isset;
  return *this;
}
void sai_thrift_acl_action_data_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_acl_action_data_t(";
  out << "enable=" << to_string(enable);
  out << ", " << "parameter=" << to_string(parameter);
  out << ")";
}


sai_thrift_u32_list_t::~sai_thrift_u32_list_t() noexcept {
}


void sai_thrift_u32_list_t::__set_count(const int32_t val) {
  this->count = val;
}

void sai_thrift_u32_list_t::__set_u32list(const std::vector<int32_t> & val) {
  this->u32list = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_u32_list_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_u32_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->u32list.clear();
            uint32_t _size44;
            ::apache::thrift::protocol::TType _etype47;
            xfer += iprot->readListBegin(_etype47, _size44);
            this->u32list.resize(_size44);
            uint32_t _i48;
            for (_i48 = 0; _i48 < _size44; ++_i48)
            {
              xfer += iprot->readI32(this->u32list[_i48]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.u32list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_u32_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_u32_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u32list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->u32list.size()));
    std::vector<int32_t> ::const_iterator _iter49;
    for (_iter49 = this->u32list.begin(); _iter49 != this->u32list.end(); ++_iter49)
    {
      xfer += oprot->writeI32((*_iter49));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_u32_list_t &a, sai_thrift_u32_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.u32list, b.u32list);
  swap(a.__isset, b.__isset);
}

sai_thrift_u32_list_t::sai_thrift_u32_list_t(const sai_thrift_u32_list_t& other50) {
  count = other50.count;
  u32list = other50.u32list;
  __isset = other50.__isset;
}
sai_thrift_u32_list_t& sai_thrift_u32_list_t::operator=(const sai_thrift_u32_list_t& other51) {
  count = other51.count;
  u32list = other51.u32list;
  __isset = other51.__isset;
  return *this;
}
void sai_thrift_u32_list_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_u32_list_t(";
  out << "count=" << to_string(count);
  out << ", " << "u32list=" << to_string(u32list);
  out << ")";
}


sai_thrift_qos_map_params_t::~sai_thrift_qos_map_params_t() noexcept {
}


void sai_thrift_qos_map_params_t::__set_tc(const int8_t val) {
  this->tc = val;
}

void sai_thrift_qos_map_params_t::__set_dscp(const int8_t val) {
  this->dscp = val;
}

void sai_thrift_qos_map_params_t::__set_dot1p(const int8_t val) {
  this->dot1p = val;
}

void sai_thrift_qos_map_params_t::__set_prio(const int8_t val) {
  this->prio = val;
}

void sai_thrift_qos_map_params_t::__set_pg(const int8_t val) {
  this->pg = val;
}

void sai_thrift_qos_map_params_t::__set_queue_index(const int8_t val) {
  this->queue_index = val;
}

void sai_thrift_qos_map_params_t::__set_color(const int8_t val) {
  this->color = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_qos_map_params_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_qos_map_params_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->tc);
          this->__isset.tc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->dscp);
          this->__isset.dscp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->dot1p);
          this->__isset.dot1p = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->prio);
          this->__isset.prio = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->pg);
          this->__isset.pg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->queue_index);
          this->__isset.queue_index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->color);
          this->__isset.color = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_qos_map_params_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_qos_map_params_t");

  xfer += oprot->writeFieldBegin("tc", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->tc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dscp", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->dscp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dot1p", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->dot1p);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("prio", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->prio);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pg", ::apache::thrift::protocol::T_BYTE, 5);
  xfer += oprot->writeByte(this->pg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("queue_index", ::apache::thrift::protocol::T_BYTE, 6);
  xfer += oprot->writeByte(this->queue_index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("color", ::apache::thrift::protocol::T_BYTE, 7);
  xfer += oprot->writeByte(this->color);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_qos_map_params_t &a, sai_thrift_qos_map_params_t &b) {
  using ::std::swap;
  swap(a.tc, b.tc);
  swap(a.dscp, b.dscp);
  swap(a.dot1p, b.dot1p);
  swap(a.prio, b.prio);
  swap(a.pg, b.pg);
  swap(a.queue_index, b.queue_index);
  swap(a.color, b.color);
  swap(a.__isset, b.__isset);
}

sai_thrift_qos_map_params_t::sai_thrift_qos_map_params_t(const sai_thrift_qos_map_params_t& other52) noexcept {
  tc = other52.tc;
  dscp = other52.dscp;
  dot1p = other52.dot1p;
  prio = other52.prio;
  pg = other52.pg;
  queue_index = other52.queue_index;
  color = other52.color;
  __isset = other52.__isset;
}
sai_thrift_qos_map_params_t& sai_thrift_qos_map_params_t::operator=(const sai_thrift_qos_map_params_t& other53) noexcept {
  tc = other53.tc;
  dscp = other53.dscp;
  dot1p = other53.dot1p;
  prio = other53.prio;
  pg = other53.pg;
  queue_index = other53.queue_index;
  color = other53.color;
  __isset = other53.__isset;
  return *this;
}
void sai_thrift_qos_map_params_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_qos_map_params_t(";
  out << "tc=" << to_string(tc);
  out << ", " << "dscp=" << to_string(dscp);
  out << ", " << "dot1p=" << to_string(dot1p);
  out << ", " << "prio=" << to_string(prio);
  out << ", " << "pg=" << to_string(pg);
  out << ", " << "queue_index=" << to_string(queue_index);
  out << ", " << "color=" << to_string(color);
  out << ")";
}


sai_thrift_qos_map_t::~sai_thrift_qos_map_t() noexcept {
}


void sai_thrift_qos_map_t::__set_key(const sai_thrift_qos_map_params_t& val) {
  this->key = val;
}

void sai_thrift_qos_map_t::__set_value(const sai_thrift_qos_map_params_t& val) {
  this->value = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_qos_map_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_qos_map_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->key.read(iprot);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->value.read(iprot);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_qos_map_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_qos_map_t");

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->key.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->value.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_qos_map_t &a, sai_thrift_qos_map_t &b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

sai_thrift_qos_map_t::sai_thrift_qos_map_t(const sai_thrift_qos_map_t& other54) noexcept {
  key = other54.key;
  value = other54.value;
  __isset = other54.__isset;
}
sai_thrift_qos_map_t& sai_thrift_qos_map_t::operator=(const sai_thrift_qos_map_t& other55) noexcept {
  key = other55.key;
  value = other55.value;
  __isset = other55.__isset;
  return *this;
}
void sai_thrift_qos_map_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_qos_map_t(";
  out << "key=" << to_string(key);
  out << ", " << "value=" << to_string(value);
  out << ")";
}


sai_thrift_qos_map_list_t::~sai_thrift_qos_map_list_t() noexcept {
}


void sai_thrift_qos_map_list_t::__set_count(const int32_t val) {
  this->count = val;
}

void sai_thrift_qos_map_list_t::__set_map_list(const std::vector<sai_thrift_qos_map_t> & val) {
  this->map_list = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_qos_map_list_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_qos_map_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->map_list.clear();
            uint32_t _size56;
            ::apache::thrift::protocol::TType _etype59;
            xfer += iprot->readListBegin(_etype59, _size56);
            this->map_list.resize(_size56);
            uint32_t _i60;
            for (_i60 = 0; _i60 < _size56; ++_i60)
            {
              xfer += this->map_list[_i60].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.map_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_qos_map_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_qos_map_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("map_list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->map_list.size()));
    std::vector<sai_thrift_qos_map_t> ::const_iterator _iter61;
    for (_iter61 = this->map_list.begin(); _iter61 != this->map_list.end(); ++_iter61)
    {
      xfer += (*_iter61).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_qos_map_list_t &a, sai_thrift_qos_map_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.map_list, b.map_list);
  swap(a.__isset, b.__isset);
}

sai_thrift_qos_map_list_t::sai_thrift_qos_map_list_t(const sai_thrift_qos_map_list_t& other62) {
  count = other62.count;
  map_list = other62.map_list;
  __isset = other62.__isset;
}
sai_thrift_qos_map_list_t& sai_thrift_qos_map_list_t::operator=(const sai_thrift_qos_map_list_t& other63) {
  count = other63.count;
  map_list = other63.map_list;
  __isset = other63.__isset;
  return *this;
}
void sai_thrift_qos_map_list_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_qos_map_list_t(";
  out << "count=" << to_string(count);
  out << ", " << "map_list=" << to_string(map_list);
  out << ")";
}


sai_thrift_fdb_values_t::~sai_thrift_fdb_values_t() noexcept {
}


void sai_thrift_fdb_values_t::__set_bport_id(const sai_thrift_object_id_t val) {
  this->bport_id = val;
}

void sai_thrift_fdb_values_t::__set_thrift_fdb_entry(const sai_thrift_fdb_entry_t& val) {
  this->thrift_fdb_entry = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_fdb_values_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_fdb_values_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bport_id);
          this->__isset.bport_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_fdb_entry.read(iprot);
          this->__isset.thrift_fdb_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_fdb_values_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_fdb_values_t");

  xfer += oprot->writeFieldBegin("bport_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->bport_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_fdb_entry", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_fdb_entry.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_fdb_values_t &a, sai_thrift_fdb_values_t &b) {
  using ::std::swap;
  swap(a.bport_id, b.bport_id);
  swap(a.thrift_fdb_entry, b.thrift_fdb_entry);
  swap(a.__isset, b.__isset);
}

sai_thrift_fdb_values_t::sai_thrift_fdb_values_t(const sai_thrift_fdb_values_t& other64) {
  bport_id = other64.bport_id;
  thrift_fdb_entry = other64.thrift_fdb_entry;
  __isset = other64.__isset;
}
sai_thrift_fdb_values_t& sai_thrift_fdb_values_t::operator=(const sai_thrift_fdb_values_t& other65) {
  bport_id = other65.bport_id;
  thrift_fdb_entry = other65.thrift_fdb_entry;
  __isset = other65.__isset;
  return *this;
}
void sai_thrift_fdb_values_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_fdb_values_t(";
  out << "bport_id=" << to_string(bport_id);
  out << ", " << "thrift_fdb_entry=" << to_string(thrift_fdb_entry);
  out << ")";
}


sai_thrift_attribute_value_t::~sai_thrift_attribute_value_t() noexcept {
}


void sai_thrift_attribute_value_t::__set_booldata(const bool val) {
  this->booldata = val;
}

void sai_thrift_attribute_value_t::__set_chardata(const std::string& val) {
  this->chardata = val;
}

void sai_thrift_attribute_value_t::__set_u8(const int8_t val) {
  this->u8 = val;
}

void sai_thrift_attribute_value_t::__set_s8(const int8_t val) {
  this->s8 = val;
}

void sai_thrift_attribute_value_t::__set_u16(const int16_t val) {
  this->u16 = val;
}

void sai_thrift_attribute_value_t::__set_s16(const int16_t val) {
  this->s16 = val;
}

void sai_thrift_attribute_value_t::__set_u32(const int32_t val) {
  this->u32 = val;
}

void sai_thrift_attribute_value_t::__set_s32(const int32_t val) {
  this->s32 = val;
}

void sai_thrift_attribute_value_t::__set_u64(const int64_t val) {
  this->u64 = val;
}

void sai_thrift_attribute_value_t::__set_s64(const int64_t val) {
  this->s64 = val;
}

void sai_thrift_attribute_value_t::__set_mac(const sai_thrift_mac_t& val) {
  this->mac = val;
}

void sai_thrift_attribute_value_t::__set_oid(const sai_thrift_object_id_t val) {
  this->oid = val;
}

void sai_thrift_attribute_value_t::__set_ip4(const sai_thrift_ip4_t& val) {
  this->ip4 = val;
}

void sai_thrift_attribute_value_t::__set_ip6(const sai_thrift_ip6_t& val) {
  this->ip6 = val;
}

void sai_thrift_attribute_value_t::__set_ipaddr(const sai_thrift_ip_address_t& val) {
  this->ipaddr = val;
}

void sai_thrift_attribute_value_t::__set_objlist(const sai_thrift_object_list_t& val) {
  this->objlist = val;
}

void sai_thrift_attribute_value_t::__set_vlanlist(const sai_thrift_vlan_list_t& val) {
  this->vlanlist = val;
}

void sai_thrift_attribute_value_t::__set_aclfield(const sai_thrift_acl_field_data_t& val) {
  this->aclfield = val;
}

void sai_thrift_attribute_value_t::__set_aclaction(const sai_thrift_acl_action_data_t& val) {
  this->aclaction = val;
}

void sai_thrift_attribute_value_t::__set_u32list(const sai_thrift_u32_list_t& val) {
  this->u32list = val;
}

void sai_thrift_attribute_value_t::__set_s32list(const sai_thrift_s32_list_t& val) {
  this->s32list = val;
}

void sai_thrift_attribute_value_t::__set_qosmap(const sai_thrift_qos_map_list_t& val) {
  this->qosmap = val;
}

void sai_thrift_attribute_value_t::__set_fdb_values(const sai_thrift_fdb_values_t& val) {
  this->fdb_values = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_attribute_value_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_attribute_value_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->booldata);
          this->__isset.booldata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->chardata);
          this->__isset.chardata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->u8);
          this->__isset.u8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->s8);
          this->__isset.s8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->u16);
          this->__isset.u16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->s16);
          this->__isset.s16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->u32);
          this->__isset.u32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->s32);
          this->__isset.s32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->u64);
          this->__isset.u64 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->s64);
          this->__isset.s64 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mac);
          this->__isset.mac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->oid);
          this->__isset.oid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip4);
          this->__isset.ip4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip6);
          this->__isset.ip6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ipaddr.read(iprot);
          this->__isset.ipaddr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->objlist.read(iprot);
          this->__isset.objlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vlanlist.read(iprot);
          this->__isset.vlanlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->aclfield.read(iprot);
          this->__isset.aclfield = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->aclaction.read(iprot);
          this->__isset.aclaction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->u32list.read(iprot);
          this->__isset.u32list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->s32list.read(iprot);
          this->__isset.s32list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->qosmap.read(iprot);
          this->__isset.qosmap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->fdb_values.read(iprot);
          this->__isset.fdb_values = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_attribute_value_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_attribute_value_t");

  xfer += oprot->writeFieldBegin("booldata", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->booldata);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chardata", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->chardata);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u8", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->u8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s8", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->s8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u16", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->u16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s16", ::apache::thrift::protocol::T_I16, 6);
  xfer += oprot->writeI16(this->s16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u32", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->u32);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s32", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->s32);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u64", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->u64);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s64", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->s64);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mac", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->mac);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("oid", ::apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->oid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip4", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->ip4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip6", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->ip6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ipaddr", ::apache::thrift::protocol::T_STRUCT, 15);
  xfer += this->ipaddr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("objlist", ::apache::thrift::protocol::T_STRUCT, 16);
  xfer += this->objlist.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vlanlist", ::apache::thrift::protocol::T_STRUCT, 17);
  xfer += this->vlanlist.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("aclfield", ::apache::thrift::protocol::T_STRUCT, 18);
  xfer += this->aclfield.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("aclaction", ::apache::thrift::protocol::T_STRUCT, 19);
  xfer += this->aclaction.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u32list", ::apache::thrift::protocol::T_STRUCT, 20);
  xfer += this->u32list.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s32list", ::apache::thrift::protocol::T_STRUCT, 21);
  xfer += this->s32list.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("qosmap", ::apache::thrift::protocol::T_STRUCT, 22);
  xfer += this->qosmap.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fdb_values", ::apache::thrift::protocol::T_STRUCT, 23);
  xfer += this->fdb_values.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_attribute_value_t &a, sai_thrift_attribute_value_t &b) {
  using ::std::swap;
  swap(a.booldata, b.booldata);
  swap(a.chardata, b.chardata);
  swap(a.u8, b.u8);
  swap(a.s8, b.s8);
  swap(a.u16, b.u16);
  swap(a.s16, b.s16);
  swap(a.u32, b.u32);
  swap(a.s32, b.s32);
  swap(a.u64, b.u64);
  swap(a.s64, b.s64);
  swap(a.mac, b.mac);
  swap(a.oid, b.oid);
  swap(a.ip4, b.ip4);
  swap(a.ip6, b.ip6);
  swap(a.ipaddr, b.ipaddr);
  swap(a.objlist, b.objlist);
  swap(a.vlanlist, b.vlanlist);
  swap(a.aclfield, b.aclfield);
  swap(a.aclaction, b.aclaction);
  swap(a.u32list, b.u32list);
  swap(a.s32list, b.s32list);
  swap(a.qosmap, b.qosmap);
  swap(a.fdb_values, b.fdb_values);
  swap(a.__isset, b.__isset);
}

sai_thrift_attribute_value_t::sai_thrift_attribute_value_t(const sai_thrift_attribute_value_t& other66) {
  booldata = other66.booldata;
  chardata = other66.chardata;
  u8 = other66.u8;
  s8 = other66.s8;
  u16 = other66.u16;
  s16 = other66.s16;
  u32 = other66.u32;
  s32 = other66.s32;
  u64 = other66.u64;
  s64 = other66.s64;
  mac = other66.mac;
  oid = other66.oid;
  ip4 = other66.ip4;
  ip6 = other66.ip6;
  ipaddr = other66.ipaddr;
  objlist = other66.objlist;
  vlanlist = other66.vlanlist;
  aclfield = other66.aclfield;
  aclaction = other66.aclaction;
  u32list = other66.u32list;
  s32list = other66.s32list;
  qosmap = other66.qosmap;
  fdb_values = other66.fdb_values;
  __isset = other66.__isset;
}
sai_thrift_attribute_value_t& sai_thrift_attribute_value_t::operator=(const sai_thrift_attribute_value_t& other67) {
  booldata = other67.booldata;
  chardata = other67.chardata;
  u8 = other67.u8;
  s8 = other67.s8;
  u16 = other67.u16;
  s16 = other67.s16;
  u32 = other67.u32;
  s32 = other67.s32;
  u64 = other67.u64;
  s64 = other67.s64;
  mac = other67.mac;
  oid = other67.oid;
  ip4 = other67.ip4;
  ip6 = other67.ip6;
  ipaddr = other67.ipaddr;
  objlist = other67.objlist;
  vlanlist = other67.vlanlist;
  aclfield = other67.aclfield;
  aclaction = other67.aclaction;
  u32list = other67.u32list;
  s32list = other67.s32list;
  qosmap = other67.qosmap;
  fdb_values = other67.fdb_values;
  __isset = other67.__isset;
  return *this;
}
void sai_thrift_attribute_value_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_attribute_value_t(";
  out << "booldata=" << to_string(booldata);
  out << ", " << "chardata=" << to_string(chardata);
  out << ", " << "u8=" << to_string(u8);
  out << ", " << "s8=" << to_string(s8);
  out << ", " << "u16=" << to_string(u16);
  out << ", " << "s16=" << to_string(s16);
  out << ", " << "u32=" << to_string(u32);
  out << ", " << "s32=" << to_string(s32);
  out << ", " << "u64=" << to_string(u64);
  out << ", " << "s64=" << to_string(s64);
  out << ", " << "mac=" << to_string(mac);
  out << ", " << "oid=" << to_string(oid);
  out << ", " << "ip4=" << to_string(ip4);
  out << ", " << "ip6=" << to_string(ip6);
  out << ", " << "ipaddr=" << to_string(ipaddr);
  out << ", " << "objlist=" << to_string(objlist);
  out << ", " << "vlanlist=" << to_string(vlanlist);
  out << ", " << "aclfield=" << to_string(aclfield);
  out << ", " << "aclaction=" << to_string(aclaction);
  out << ", " << "u32list=" << to_string(u32list);
  out << ", " << "s32list=" << to_string(s32list);
  out << ", " << "qosmap=" << to_string(qosmap);
  out << ", " << "fdb_values=" << to_string(fdb_values);
  out << ")";
}


sai_thrift_attribute_t::~sai_thrift_attribute_t() noexcept {
}


void sai_thrift_attribute_t::__set_id(const int32_t val) {
  this->id = val;
}

void sai_thrift_attribute_t::__set_value(const sai_thrift_attribute_value_t& val) {
  this->value = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_attribute_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_attribute_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->value.read(iprot);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_attribute_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_attribute_t");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->value.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_attribute_t &a, sai_thrift_attribute_t &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

sai_thrift_attribute_t::sai_thrift_attribute_t(const sai_thrift_attribute_t& other68) {
  id = other68.id;
  value = other68.value;
  __isset = other68.__isset;
}
sai_thrift_attribute_t& sai_thrift_attribute_t::operator=(const sai_thrift_attribute_t& other69) {
  id = other69.id;
  value = other69.value;
  __isset = other69.__isset;
  return *this;
}
void sai_thrift_attribute_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_attribute_t(";
  out << "id=" << to_string(id);
  out << ", " << "value=" << to_string(value);
  out << ")";
}


sai_thrift_route_entry_t::~sai_thrift_route_entry_t() noexcept {
}


void sai_thrift_route_entry_t::__set_vr_id(const sai_thrift_object_id_t val) {
  this->vr_id = val;
}

void sai_thrift_route_entry_t::__set_destination(const sai_thrift_ip_prefix_t& val) {
  this->destination = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_route_entry_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_route_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->vr_id);
          this->__isset.vr_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->destination.read(iprot);
          this->__isset.destination = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_route_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_route_entry_t");

  xfer += oprot->writeFieldBegin("vr_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->vr_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("destination", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->destination.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_route_entry_t &a, sai_thrift_route_entry_t &b) {
  using ::std::swap;
  swap(a.vr_id, b.vr_id);
  swap(a.destination, b.destination);
  swap(a.__isset, b.__isset);
}

sai_thrift_route_entry_t::sai_thrift_route_entry_t(const sai_thrift_route_entry_t& other70) {
  vr_id = other70.vr_id;
  destination = other70.destination;
  __isset = other70.__isset;
}
sai_thrift_route_entry_t& sai_thrift_route_entry_t::operator=(const sai_thrift_route_entry_t& other71) {
  vr_id = other71.vr_id;
  destination = other71.destination;
  __isset = other71.__isset;
  return *this;
}
void sai_thrift_route_entry_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_route_entry_t(";
  out << "vr_id=" << to_string(vr_id);
  out << ", " << "destination=" << to_string(destination);
  out << ")";
}


sai_thrift_neighbor_entry_t::~sai_thrift_neighbor_entry_t() noexcept {
}


void sai_thrift_neighbor_entry_t::__set_rif_id(const sai_thrift_object_id_t val) {
  this->rif_id = val;
}

void sai_thrift_neighbor_entry_t::__set_ip_address(const sai_thrift_ip_address_t& val) {
  this->ip_address = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_neighbor_entry_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_neighbor_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->rif_id);
          this->__isset.rif_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ip_address.read(iprot);
          this->__isset.ip_address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_neighbor_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_neighbor_entry_t");

  xfer += oprot->writeFieldBegin("rif_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->rif_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip_address", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->ip_address.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_neighbor_entry_t &a, sai_thrift_neighbor_entry_t &b) {
  using ::std::swap;
  swap(a.rif_id, b.rif_id);
  swap(a.ip_address, b.ip_address);
  swap(a.__isset, b.__isset);
}

sai_thrift_neighbor_entry_t::sai_thrift_neighbor_entry_t(const sai_thrift_neighbor_entry_t& other72) {
  rif_id = other72.rif_id;
  ip_address = other72.ip_address;
  __isset = other72.__isset;
}
sai_thrift_neighbor_entry_t& sai_thrift_neighbor_entry_t::operator=(const sai_thrift_neighbor_entry_t& other73) {
  rif_id = other73.rif_id;
  ip_address = other73.ip_address;
  __isset = other73.__isset;
  return *this;
}
void sai_thrift_neighbor_entry_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_neighbor_entry_t(";
  out << "rif_id=" << to_string(rif_id);
  out << ", " << "ip_address=" << to_string(ip_address);
  out << ")";
}


sai_thrift_attribute_list_t::~sai_thrift_attribute_list_t() noexcept {
}


void sai_thrift_attribute_list_t::__set_attr_list(const std::vector<sai_thrift_attribute_t> & val) {
  this->attr_list = val;
}

void sai_thrift_attribute_list_t::__set_attr_count(const int32_t val) {
  this->attr_count = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_attribute_list_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_attribute_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->attr_list.clear();
            uint32_t _size74;
            ::apache::thrift::protocol::TType _etype77;
            xfer += iprot->readListBegin(_etype77, _size74);
            this->attr_list.resize(_size74);
            uint32_t _i78;
            for (_i78 = 0; _i78 < _size74; ++_i78)
            {
              xfer += this->attr_list[_i78].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->attr_count);
          this->__isset.attr_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_attribute_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_attribute_list_t");

  xfer += oprot->writeFieldBegin("attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter79;
    for (_iter79 = this->attr_list.begin(); _iter79 != this->attr_list.end(); ++_iter79)
    {
      xfer += (*_iter79).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("attr_count", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->attr_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_attribute_list_t &a, sai_thrift_attribute_list_t &b) {
  using ::std::swap;
  swap(a.attr_list, b.attr_list);
  swap(a.attr_count, b.attr_count);
  swap(a.__isset, b.__isset);
}

sai_thrift_attribute_list_t::sai_thrift_attribute_list_t(const sai_thrift_attribute_list_t& other80) {
  attr_list = other80.attr_list;
  attr_count = other80.attr_count;
  __isset = other80.__isset;
}
sai_thrift_attribute_list_t& sai_thrift_attribute_list_t::operator=(const sai_thrift_attribute_list_t& other81) {
  attr_list = other81.attr_list;
  attr_count = other81.attr_count;
  __isset = other81.__isset;
  return *this;
}
void sai_thrift_attribute_list_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_attribute_list_t(";
  out << "attr_list=" << to_string(attr_list);
  out << ", " << "attr_count=" << to_string(attr_count);
  out << ")";
}


sai_thrift_result_data_t::~sai_thrift_result_data_t() noexcept {
}


void sai_thrift_result_data_t::__set_objlist(const sai_thrift_object_list_t& val) {
  this->objlist = val;
}

void sai_thrift_result_data_t::__set_oid(const sai_thrift_object_id_t val) {
  this->oid = val;
}

void sai_thrift_result_data_t::__set_u16(const int16_t val) {
  this->u16 = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_result_data_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_result_data_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->objlist.read(iprot);
          this->__isset.objlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->oid);
          this->__isset.oid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->u16);
          this->__isset.u16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_result_data_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_result_data_t");

  xfer += oprot->writeFieldBegin("objlist", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->objlist.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("oid", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->oid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u16", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->u16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_result_data_t &a, sai_thrift_result_data_t &b) {
  using ::std::swap;
  swap(a.objlist, b.objlist);
  swap(a.oid, b.oid);
  swap(a.u16, b.u16);
  swap(a.__isset, b.__isset);
}

sai_thrift_result_data_t::sai_thrift_result_data_t(const sai_thrift_result_data_t& other82) {
  objlist = other82.objlist;
  oid = other82.oid;
  u16 = other82.u16;
  __isset = other82.__isset;
}
sai_thrift_result_data_t& sai_thrift_result_data_t::operator=(const sai_thrift_result_data_t& other83) {
  objlist = other83.objlist;
  oid = other83.oid;
  u16 = other83.u16;
  __isset = other83.__isset;
  return *this;
}
void sai_thrift_result_data_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_result_data_t(";
  out << "objlist=" << to_string(objlist);
  out << ", " << "oid=" << to_string(oid);
  out << ", " << "u16=" << to_string(u16);
  out << ")";
}


sai_thrift_result_t::~sai_thrift_result_t() noexcept {
}


void sai_thrift_result_t::__set_data(const sai_thrift_result_data_t& val) {
  this->data = val;
}

void sai_thrift_result_t::__set_status(const sai_thrift_status_t val) {
  this->status = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_result_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_result_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data.read(iprot);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_result_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_result_t");

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->data.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_result_t &a, sai_thrift_result_t &b) {
  using ::std::swap;
  swap(a.data, b.data);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

sai_thrift_result_t::sai_thrift_result_t(const sai_thrift_result_t& other84) {
  data = other84.data;
  status = other84.status;
  __isset = other84.__isset;
}
sai_thrift_result_t& sai_thrift_result_t::operator=(const sai_thrift_result_t& other85) {
  data = other85.data;
  status = other85.status;
  __isset = other85.__isset;
  return *this;
}
void sai_thrift_result_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_result_t(";
  out << "data=" << to_string(data);
  out << ", " << "status=" << to_string(status);
  out << ")";
}

} // namespace
